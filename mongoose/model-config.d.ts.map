{"version":3,"sources":["mongoose/model-config.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAGvD,OAAO,QAAQ,UAAU,CAAC;IACxB,UAAU,aAAa;QACrB,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAC1B,SAAS,CAAC,EAAE,eAAe,CAAC;KAC7B;IAED,UAAU,MAAM;QACd,SAAS,CAAC,EAAE;YACV,QAAQ,EAAE;gBAAE,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,CAAA;aAAE,CAAC;SACxC,CAAC;QACF,YAAY,CAAC,EAAE,MAAM,CAAC;QACtB,OAAO,CAAC,EAAE,aAAa,CAAC;QACxB,GAAG,EAAE;YACH,QAAQ,EAAE,MAAM,EAAE,CAAC;YACnB,OAAO,EAAE,MAAM,EAAE,CAAC;YAClB,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;SAC1B,CAAC;KACH;IAED,UAAU,UAAU;QAClB,OAAO,CAAC,EAAE,iBAAiB,CAAC;KAC7B;IAED,UAAU,uBAAuB;QAC/B,KAAK,CAAC,EAAE,MAAM,CAAC;KAChB;IAED,UAAU,oBAAoB;QAC5B,KAAK,CAAC,EAAE,MAAM,CAAC;KAChB;IAED,UAAU,oBAAoB;QAC5B,KAAK,CAAC,EAAE,MAAM,CAAC;KAChB;CACF;AAED,MAAM,WAAW,WAAW;IAC1B,KAAK,CAAC,EAAE;QAAE,CAAC,IAAI,EAAE,MAAM,GAAG,GAAG,CAAA;KAAE,CAAC;IAChC,UAAU,CAAC,EAAE;QACX,IAAI,EAAE,MAAM,CAAC;QACb,IAAI,EAAE,MAAM,CAAC;KACd,CAAC;IACF,GAAG,CAAC,EAAE,GAAG,CAAC;IACV,IAAI,CAAC,EAAE,GAAG,CAAC;IACX,OAAO,CAAC,EAAE,GAAG,CAAC;CACf;AAED,MAAM,WAAW,iBAAiB;IAChC,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED;;GAEG;AACH,MAAM,WAAW,eAAe;IAC9B,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAC1B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,UAAU,CAAC,EAAE;QAAE,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;CAC1C;AAED,MAAM,WAAW,YAAY;IAC3B,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,WAAW,mBAAmB;IAClC,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,0BAA0B,CAAC,EAAE,MAAM,CAAC;IACpC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC;IACnB,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,MAAM,CAAC;IACrC,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,OAAO,CAAC,EAAE,iBAAiB,CAAC;IAC5B,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC9C,yBAAyB,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;CAC3E;AAED,MAAM,WAAW,mBAAmB;IAClC,YAAY,CAAC,EAAE,mBAAmB,CAAC;CACpC;AAED,eAAO,MAAM,sCAAsC,EAAE,mBAQpD,CAAC;AAEF,eAAO,MAAM,mBAAmB,EAAE,mBAEjC,CAAC;AAEF,wBAAgB,mBAAmB,CACjC,WAAW,EAAE,mBAAmB,GAC/B,QAAQ,CAIV","file":"model-config.d.ts","sourcesContent":["import * as _ from 'underscore';\r\nimport { ConnectionOptions, Mongoose } from 'mongoose';\r\n\r\n\r\ndeclare module 'mongoose' {\r\n  interface SchemaOptions {\r\n    discriminatorKey?: string;\r\n    dataLevel?: DataLevelConfig;\r\n  }\r\n\r\n  interface Schema {\r\n    dataLevel?: {\r\n      levelMap: { [name: string]: string[] };\r\n    };\r\n    parentSchema?: Schema;\r\n    options?: SchemaOptions;\r\n    api: {\r\n      READONLY: string[];\r\n      AUTOGEN: string[];\r\n      [name: string]: string[];\r\n    };\r\n  }\r\n\r\n  interface SchemaType {\r\n    options?: SchemaTypeOptions;\r\n  }\r\n\r\n  interface DocumentToObjectOptions {\r\n    level?: string;\r\n  }\r\n\r\n  interface QueryFindBaseOptions {\r\n    level?: string;\r\n  }\r\n\r\n  interface QueryPopulateOptions {\r\n    level?: string;\r\n  }\r\n}\r\n\r\nexport interface IOverwrites {\r\n  query?: { [name: string]: any };\r\n  pagination?: {\r\n    page: number;\r\n    size: number;\r\n  };\r\n  doc?: any;\r\n  sort?: any;\r\n  options?: any;\r\n}\r\n\r\nexport interface SchemaTypeOptions {\r\n  api?: string;\r\n}\r\n\r\n/**\r\n * Configuration for dataLevel.\r\n */\r\nexport interface DataLevelConfig {\r\n  levels: string[] | object;\r\n  default?: string;\r\n  _levelsMap?: { [level: string]: object };\r\n}\r\n\r\nexport interface ToJSONOption {\r\n  level?: string;\r\n}\r\n\r\nexport interface MultiTenancyOptions {\r\n  enabled?: boolean;\r\n  defaultCollectionNamespace?: string;\r\n  tenants?: string[];\r\n  tenancyFn?: (prop: string) => string;\r\n  uris?: string;\r\n  options?: ConnectionOptions;\r\n  onError?: (err: any, tenancy: string) => void;\r\n  onMongooseInstanceCreated?: (mongoose: Mongoose, tenancy: string) => void;\r\n}\r\n\r\nexport interface SBaseMongooseConfig {\r\n  multiTenancy?: MultiTenancyOptions;\r\n}\r\n\r\nexport const DEFAULT_MONGOOSE_MULTI_TENANCY_OPTIONS: MultiTenancyOptions = {\r\n  enabled: false,\r\n  defaultCollectionNamespace: '',\r\n  tenants: [],\r\n  tenancyFn: () => 'default',\r\n  options: {},\r\n  onError: () => {},\r\n  onMongooseInstanceCreated: () => {},\r\n};\r\n\r\nexport const sbaseMongooseConfig: SBaseMongooseConfig = {\r\n  multiTenancy: _.clone(DEFAULT_MONGOOSE_MULTI_TENANCY_OPTIONS),\r\n};\r\n\r\nexport function newMongooseInstance(\r\n  sbaseConfig: SBaseMongooseConfig,\r\n): Mongoose {\r\n  const mongoose = new Mongoose();\r\n  (mongoose as any).sbaseConfig = sbaseConfig;\r\n  return mongoose;\r\n}\r\n"],"sourceRoot":"D:\\zyq\\ark-db/src"}