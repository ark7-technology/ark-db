{"version":3,"sources":["mongoose/types.ts"],"names":[],"mappings":"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","file":"types.d.ts","sourcesContent":["import * as mongodb from 'mongodb';\r\nimport { Document, Model as MModel } from 'mongoose';\r\n\r\nimport { A7Model } from './a7-model';\r\nimport { Model } from './model';\r\n\r\ntype OrdinaryFields = '_id' | 'createdAt' | 'lastUpdateTime';\r\n\r\ntype AsObjectSingle<T extends Model> = Omit<\r\n  T,\r\n  Exclude<keyof A7Model, OrdinaryFields>\r\n>;\r\n\r\nexport type AsObject<T extends Model> = {\r\n  [key in keyof AsObjectSingle<Omit<T, OrdinaryFields>>]: T[key];\r\n} &\r\n  Partial<Pick<T, OrdinaryFields & keyof T>>;\r\n\r\nexport type DeepPartial<T> = T extends Function\r\n  ? T\r\n  : T extends object\r\n  ? { [P in keyof T]?: DeepPartial<T[P]> }\r\n  : T;\r\n\r\nexport type AsObjectPartial<T extends Model> = DeepPartial<AsObject<T>>;\r\n\r\nexport type PartialDoc<X extends Model> = AsObjectPartial<X>;\r\n\r\nexport interface ModifiedMongooseModel<T extends Document, M extends Model>\r\n  extends Omit<MModel<T>, 'create' | 'insertMany'> {\r\n  create(doc: PartialDoc<M>, options?: mongoose.SaveOptions): Promise<T>;\r\n\r\n  insertMany(\r\n    docs: PartialDoc<M>,\r\n    options?: mongoose.InsertManyOptions,\r\n  ): Promise<T>;\r\n\r\n  insertMany(\r\n    docs: PartialDoc<M>[],\r\n    options?: mongoose.InsertManyOptions,\r\n  ): Promise<T[]>;\r\n\r\n  findOneAndReplace(\r\n    query: any,\r\n    update: PartialDoc<M>,\r\n    options?: mongoose.FindOneAndReplaceOptions,\r\n  ): Promise<T>;\r\n}\r\n\r\nexport type ConvertModel<\r\n  T extends Document,\r\n  X extends Model\r\n> = ModifiedMongooseModel<T, X>;\r\n\r\nnamespace mongoose {\r\n  export interface SaveOptions {\r\n    safe?: boolean | WriteConcern;\r\n    validateBeforeSave?: boolean;\r\n    session?: ClientSession;\r\n  }\r\n\r\n  export interface InsertManyOptions {\r\n    ordered?: boolean;\r\n    rawResult?: boolean;\r\n  }\r\n\r\n  export interface WriteConcern {\r\n    j?: boolean;\r\n    w?: number | 'majority' | TagSet;\r\n    wtimeout?: number;\r\n  }\r\n\r\n  export interface TagSet {\r\n    [k: string]: string;\r\n  }\r\n\r\n  export interface ClientSession extends mongodb.ClientSession {}\r\n\r\n  export interface FindOneAndReplaceOptions {\r\n    /** if true, return the modified document rather than the original. defaults to false (changed in 4.0) */\r\n    new?: boolean;\r\n    /** creates the object if it doesn't exist. defaults to false. */\r\n    upsert?: boolean;\r\n    /** if true, runs update validators on this command. Update validators validate the update operation against the model's schema. */\r\n    runValidators?: boolean;\r\n    /**\r\n     * if this and upsert are true, mongoose will apply the defaults specified in the model's schema if a new document\r\n     * is created. This option only works on MongoDB >= 2.4 because it relies on MongoDB's $setOnInsert operator.\r\n     */\r\n    setDefaultsOnInsert?: boolean;\r\n    /**\r\n     * if set to 'query' and runValidators is on, this will refer to the query in custom validator\r\n     * functions that update validation runs. Does nothing if runValidators is false.\r\n     */\r\n    context?: string;\r\n    /**\r\n     *  by default, mongoose only returns the first error that occurred in casting the query.\r\n     *  Turn on this option to aggregate all the cast errors.\r\n     */\r\n    multipleCastError?: boolean;\r\n    /** Field selection. Equivalent to .select(fields).findOneAndUpdate() */\r\n    fields?: any | string;\r\n    /**\r\n     * If true, delete any properties whose value is undefined when casting an\r\n     * update. In other words, if this is set, Mongoose will delete baz from the\r\n     * update in Model.updateOne({}, { foo: 'bar', baz: undefined }) before\r\n     * sending the update to the server.\r\n     */\r\n    omitUndefined?: boolean;\r\n    session?: ClientSession;\r\n    /**\r\n     * Only update elements that match the arrayFilters conditions in the document or documents that match the query conditions.\r\n     */\r\n    arrayFilters?: { [key: string]: any }[];\r\n  }\r\n}\r\n"],"sourceRoot":"D:\\zyq\\ark-db/src"}