{"version":3,"sources":["mongoose/data-level.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uBAAuB,EAAyB,MAAM,UAAU,CAAC;AAE1E,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAInC,oBAAY,kBAAkB,GAAG,OAAO,cAAc,CAAC;AAEvD,qBAIa,cAAe,SAAQ,KAAK,CAAC,aAAa;IAC9C,MAAM,CAAC,OAAO,CAAC,EAAE,uBAAuB,GAAG,QAAQ,CAAC,IAAI,CAAC;CAcjE;AAiLD,wBAAgB,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,GAAE,GAAQ,qBAMpD","file":"data-level.d.ts","sourcesContent":["import * as _ from 'underscore';\r\nimport { DocumentToObjectOptions, Schema, SchemaOptions } from 'mongoose';\r\n\r\nimport * as model from './model';\r\nimport { AsObject } from './types';\r\nimport { DataLevelConfig } from './model-config';\r\nimport { Field } from './';\r\n\r\nexport type DataLevelModelType = typeof DataLevelModel;\r\n\r\n@model.Plugin({\r\n  fn: dataLevelPlugin,\r\n  priority: 100,\r\n})\r\nexport class DataLevelModel extends model.DocumentModel {\r\n  public toJSON(options?: DocumentToObjectOptions): AsObject<this> {\r\n    let obj = this.toObject(options);\r\n    if (options && options.level) {\r\n      const fields = _.keys(\r\n        fetchModelFields(\r\n          this.schema.options.dataLevel,\r\n          options.level,\r\n          this.schema.dataLevel.levelMap,\r\n        ),\r\n      );\r\n      obj = deepOmit(obj, fields);\r\n    }\r\n    return obj;\r\n  }\r\n}\r\n\r\nfunction deepOmit(obj: any, fields: string[]): any {\r\n  if (_.isArray(obj)) {\r\n    return _.map(obj, (o) => deepOmit(o, fields));\r\n  }\r\n\r\n  const grouped = _.groupBy(fields, (f) => (f.indexOf('.') === -1 ? 1 : 0));\r\n  if (grouped[1]) {\r\n    obj = _.omit(obj, ...grouped[1]);\r\n  }\r\n  if (grouped[0]) {\r\n    const goal: any = _.chain(grouped[0])\r\n      .map((v) => {\r\n        const idx = v.indexOf('.');\r\n        return [v.substr(0, idx), v.substring(idx + 1)];\r\n      })\r\n      .groupBy((pair) => pair[0])\r\n      .mapObject((pairs) => _.map(pairs, (p) => p[1]))\r\n      .value();\r\n    _.each(goal, (fs: string[], name: string) => {\r\n      if (obj && obj[name]) {\r\n        obj[name] = deepOmit(obj[name], fs);\r\n      }\r\n    });\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction dataLevelPlugin(schema: Schema, options: SchemaOptions) {\r\n  if (schema.dataLevel != null) {\r\n    return;\r\n  }\r\n  if (options == null) {\r\n    options = schema.options;\r\n  }\r\n\r\n  const dataLevelOptionsLevels = _.values(\r\n    (options.dataLevel && options.dataLevel.levels) || [],\r\n  );\r\n\r\n  schema.dataLevel = {\r\n    levelMap: {},\r\n  };\r\n\r\n  _.each((schema as any).paths, (st: any, path: string) => {\r\n    if (st && st.schema) {\r\n      dataLevelPlugin(st.schema, options);\r\n    }\r\n  });\r\n\r\n  addToLevelMap(schema, levelPaths(schema));\r\n\r\n  for (const name of model.preQueries) {\r\n    schema.pre(name, modifyProjection);\r\n  }\r\n}\r\n\r\nfunction modifyProjection(next: () => void) {\r\n  const schema: Schema = this.schema;\r\n  if (!schema.options || !schema.options.dataLevel) {\r\n    next();\r\n    return;\r\n  }\r\n\r\n  const levels = _.values(schema.options.dataLevel.levels);\r\n\r\n  const level =\r\n    this.options.level ||\r\n    (schema.options.dataLevel && schema.options.dataLevel.default);\r\n\r\n  if (level) {\r\n    if (this._fields == null) {\r\n      this._fields = {};\r\n    }\r\n\r\n    if (\r\n      _.findIndex(_.values(this._fields), (x: any) => x === true || x === 1) ===\r\n      -1\r\n    ) {\r\n      const projectedFields = fetchModelFields(\r\n        schema.options.dataLevel,\r\n        level,\r\n        schema.dataLevel.levelMap,\r\n      );\r\n      _.extend(this._fields, projectedFields);\r\n    }\r\n  }\r\n  next();\r\n}\r\n\r\nfunction fetchModelFields(\r\n  config: DataLevelConfig,\r\n  level: string,\r\n  levelMap: { [name: string]: string[] },\r\n): object {\r\n  if (config._levelsMap == null) {\r\n    config._levelsMap = {};\r\n  }\r\n  if (config._levelsMap[level]) {\r\n    return config._levelsMap[level];\r\n  }\r\n\r\n  const fields: string[] = [];\r\n\r\n  let valid = false;\r\n\r\n  _.each(_.values(config.levels), (l: string) => {\r\n    if (valid) {\r\n      _.each(levelMap[l], (p: string) => {\r\n        fields.push(p);\r\n      });\r\n    }\r\n    if (l === level) {\r\n      valid = true;\r\n    }\r\n  });\r\n\r\n  const filtered: string[] = _.filter(fields, (target) => {\r\n    return _.all(fields, (r) => {\r\n      return target.indexOf(r + '.') !== 0;\r\n    });\r\n  });\r\n\r\n  const result: any = {};\r\n  _.each(filtered, (f) => {\r\n    result[f] = 0;\r\n  });\r\n\r\n  config._levelsMap[level] = result;\r\n\r\n  return result;\r\n}\r\n\r\nfunction addToLevelMap(schema: Schema, lps: LevelPath[]) {\r\n  const dataLevelOptionsLevels = _.values(\r\n    (schema.options.dataLevel && schema.options.dataLevel.levels) || [],\r\n  );\r\n  const levelMap = schema.dataLevel.levelMap;\r\n\r\n  for (const { path, level } of lps) {\r\n    levelMap[level] = _.union(levelMap[level], [path]);\r\n  }\r\n\r\n  _.each((schema as any).paths, (st: any, path: string) => {\r\n    if (st && st.schema) {\r\n      const s: Schema = st.schema;\r\n      _.each(s.dataLevel.levelMap, (ps, l) => {\r\n        levelMap[l] = _.union(\r\n          levelMap[l],\r\n          _.map(ps, (p) => `${path}.${p}`),\r\n        );\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction levelPaths(schema: Schema): LevelPath[] {\r\n  const res: LevelPath[] = [];\r\n  schema.eachPath((pathname, schemaType) => {\r\n    if (pathname.indexOf('$*') >= 0) {\r\n      return;\r\n    }\r\n    const level = (schemaType as any).options.level;\r\n\r\n    if (level != null) {\r\n      res.push({ path: pathname, level });\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\ninterface LevelPath {\r\n  path: string;\r\n  level: string;\r\n}\r\n\r\nexport function Level(level: string, schema: any = {}) {\r\n  return Field(\r\n    _.extend({}, schema, {\r\n      level,\r\n    }),\r\n  );\r\n}\r\n"],"sourceRoot":"D:\\zyq\\ark-db/src"}