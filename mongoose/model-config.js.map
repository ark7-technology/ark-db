{"version":3,"sources":["mongoose/model-config.ts"],"names":[],"mappings":";;;AAAA,gCAAgC;AAChC,uCAAuD;AAkF1C,QAAA,sCAAsC,GAAwB;IACzE,OAAO,EAAE,KAAK;IACd,0BAA0B,EAAE,EAAE;IAC9B,OAAO,EAAE,EAAE;IACX,SAAS,EAAE,GAAG,EAAE,CAAC,SAAS;IAC1B,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC;IACjB,yBAAyB,EAAE,GAAG,EAAE,GAAE,CAAC;CACpC,CAAC;AAEW,QAAA,mBAAmB,GAAwB;IACtD,YAAY,EAAE,CAAC,CAAC,KAAK,CAAC,8CAAsC,CAAC;CAC9D,CAAC;AAEF,SAAgB,mBAAmB,CACjC,WAAgC;IAEhC,MAAM,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;IAC/B,QAAgB,CAAC,WAAW,GAAG,WAAW,CAAC;IAC5C,OAAO,QAAQ,CAAC;AAClB,CAAC;AAND,kDAMC","file":"model-config.js","sourcesContent":["import * as _ from 'underscore';\r\nimport { ConnectionOptions, Mongoose } from 'mongoose';\r\n\r\n\r\ndeclare module 'mongoose' {\r\n  interface SchemaOptions {\r\n    discriminatorKey?: string;\r\n    dataLevel?: DataLevelConfig;\r\n  }\r\n\r\n  interface Schema {\r\n    dataLevel?: {\r\n      levelMap: { [name: string]: string[] };\r\n    };\r\n    parentSchema?: Schema;\r\n    options?: SchemaOptions;\r\n    api: {\r\n      READONLY: string[];\r\n      AUTOGEN: string[];\r\n      [name: string]: string[];\r\n    };\r\n  }\r\n\r\n  interface SchemaType {\r\n    options?: SchemaTypeOptions;\r\n  }\r\n\r\n  interface DocumentToObjectOptions {\r\n    level?: string;\r\n  }\r\n\r\n  interface QueryFindBaseOptions {\r\n    level?: string;\r\n  }\r\n\r\n  interface QueryPopulateOptions {\r\n    level?: string;\r\n  }\r\n}\r\n\r\nexport interface IOverwrites {\r\n  query?: { [name: string]: any };\r\n  pagination?: {\r\n    page: number;\r\n    size: number;\r\n  };\r\n  doc?: any;\r\n  sort?: any;\r\n  options?: any;\r\n}\r\n\r\nexport interface SchemaTypeOptions {\r\n  api?: string;\r\n}\r\n\r\n/**\r\n * Configuration for dataLevel.\r\n */\r\nexport interface DataLevelConfig {\r\n  levels: string[] | object;\r\n  default?: string;\r\n  _levelsMap?: { [level: string]: object };\r\n}\r\n\r\nexport interface ToJSONOption {\r\n  level?: string;\r\n}\r\n\r\nexport interface MultiTenancyOptions {\r\n  enabled?: boolean;\r\n  defaultCollectionNamespace?: string;\r\n  tenants?: string[];\r\n  tenancyFn?: (prop: string) => string;\r\n  uris?: string;\r\n  options?: ConnectionOptions;\r\n  onError?: (err: any, tenancy: string) => void;\r\n  onMongooseInstanceCreated?: (mongoose: Mongoose, tenancy: string) => void;\r\n}\r\n\r\nexport interface SBaseMongooseConfig {\r\n  multiTenancy?: MultiTenancyOptions;\r\n}\r\n\r\nexport const DEFAULT_MONGOOSE_MULTI_TENANCY_OPTIONS: MultiTenancyOptions = {\r\n  enabled: false,\r\n  defaultCollectionNamespace: '',\r\n  tenants: [],\r\n  tenancyFn: () => 'default',\r\n  options: {},\r\n  onError: () => {},\r\n  onMongooseInstanceCreated: () => {},\r\n};\r\n\r\nexport const sbaseMongooseConfig: SBaseMongooseConfig = {\r\n  multiTenancy: _.clone(DEFAULT_MONGOOSE_MULTI_TENANCY_OPTIONS),\r\n};\r\n\r\nexport function newMongooseInstance(\r\n  sbaseConfig: SBaseMongooseConfig,\r\n): Mongoose {\r\n  const mongoose = new Mongoose();\r\n  (mongoose as any).sbaseConfig = sbaseConfig;\r\n  return mongoose;\r\n}\r\n"],"sourceRoot":"D:\\zyq\\ark-db/src"}