{"version":3,"sources":["mongoose/types.ts"],"names":[],"mappings":"","file":"types.js","sourcesContent":["import * as mongodb from 'mongodb';\r\nimport { Document, Model as MModel } from 'mongoose';\r\n\r\nimport { A7Model } from './a7-model';\r\nimport { Model } from './model';\r\n\r\ntype OrdinaryFields = '_id' | 'createdAt' | 'lastUpdateTime';\r\n\r\ntype AsObjectSingle<T extends Model> = Omit<\r\n  T,\r\n  Exclude<keyof A7Model, OrdinaryFields>\r\n>;\r\n\r\nexport type AsObject<T extends Model> = {\r\n  [key in keyof AsObjectSingle<Omit<T, OrdinaryFields>>]: T[key];\r\n} &\r\n  Partial<Pick<T, OrdinaryFields & keyof T>>;\r\n\r\nexport type DeepPartial<T> = T extends Function\r\n  ? T\r\n  : T extends object\r\n  ? { [P in keyof T]?: DeepPartial<T[P]> }\r\n  : T;\r\n\r\nexport type AsObjectPartial<T extends Model> = DeepPartial<AsObject<T>>;\r\n\r\nexport type PartialDoc<X extends Model> = AsObjectPartial<X>;\r\n\r\nexport interface ModifiedMongooseModel<T extends Document, M extends Model>\r\n  extends Omit<MModel<T>, 'create' | 'insertMany'> {\r\n  create(doc: PartialDoc<M>, options?: mongoose.SaveOptions): Promise<T>;\r\n\r\n  insertMany(\r\n    docs: PartialDoc<M>,\r\n    options?: mongoose.InsertManyOptions,\r\n  ): Promise<T>;\r\n\r\n  insertMany(\r\n    docs: PartialDoc<M>[],\r\n    options?: mongoose.InsertManyOptions,\r\n  ): Promise<T[]>;\r\n\r\n  findOneAndReplace(\r\n    query: any,\r\n    update: PartialDoc<M>,\r\n    options?: mongoose.FindOneAndReplaceOptions,\r\n  ): Promise<T>;\r\n}\r\n\r\nexport type ConvertModel<\r\n  T extends Document,\r\n  X extends Model\r\n> = ModifiedMongooseModel<T, X>;\r\n\r\nnamespace mongoose {\r\n  export interface SaveOptions {\r\n    safe?: boolean | WriteConcern;\r\n    validateBeforeSave?: boolean;\r\n    session?: ClientSession;\r\n  }\r\n\r\n  export interface InsertManyOptions {\r\n    ordered?: boolean;\r\n    rawResult?: boolean;\r\n  }\r\n\r\n  export interface WriteConcern {\r\n    j?: boolean;\r\n    w?: number | 'majority' | TagSet;\r\n    wtimeout?: number;\r\n  }\r\n\r\n  export interface TagSet {\r\n    [k: string]: string;\r\n  }\r\n\r\n  export interface ClientSession extends mongodb.ClientSession {}\r\n\r\n  export interface FindOneAndReplaceOptions {\r\n    /** if true, return the modified document rather than the original. defaults to false (changed in 4.0) */\r\n    new?: boolean;\r\n    /** creates the object if it doesn't exist. defaults to false. */\r\n    upsert?: boolean;\r\n    /** if true, runs update validators on this command. Update validators validate the update operation against the model's schema. */\r\n    runValidators?: boolean;\r\n    /**\r\n     * if this and upsert are true, mongoose will apply the defaults specified in the model's schema if a new document\r\n     * is created. This option only works on MongoDB >= 2.4 because it relies on MongoDB's $setOnInsert operator.\r\n     */\r\n    setDefaultsOnInsert?: boolean;\r\n    /**\r\n     * if set to 'query' and runValidators is on, this will refer to the query in custom validator\r\n     * functions that update validation runs. Does nothing if runValidators is false.\r\n     */\r\n    context?: string;\r\n    /**\r\n     *  by default, mongoose only returns the first error that occurred in casting the query.\r\n     *  Turn on this option to aggregate all the cast errors.\r\n     */\r\n    multipleCastError?: boolean;\r\n    /** Field selection. Equivalent to .select(fields).findOneAndUpdate() */\r\n    fields?: any | string;\r\n    /**\r\n     * If true, delete any properties whose value is undefined when casting an\r\n     * update. In other words, if this is set, Mongoose will delete baz from the\r\n     * update in Model.updateOne({}, { foo: 'bar', baz: undefined }) before\r\n     * sending the update to the server.\r\n     */\r\n    omitUndefined?: boolean;\r\n    session?: ClientSession;\r\n    /**\r\n     * Only update elements that match the arrayFilters conditions in the document or documents that match the query conditions.\r\n     */\r\n    arrayFilters?: { [key: string]: any }[];\r\n  }\r\n}\r\n"],"sourceRoot":"D:\\zyq\\ark-db/src"}