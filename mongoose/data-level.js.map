{"version":3,"sources":["mongoose/data-level.ts"],"names":[],"mappings":"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","file":"data-level.js","sourcesContent":["import * as _ from 'underscore';\r\nimport { DocumentToObjectOptions, Schema, SchemaOptions } from 'mongoose';\r\n\r\nimport * as model from './model';\r\nimport { AsObject } from './types';\r\nimport { DataLevelConfig } from './model-config';\r\nimport { Field } from './';\r\n\r\nexport type DataLevelModelType = typeof DataLevelModel;\r\n\r\n@model.Plugin({\r\n  fn: dataLevelPlugin,\r\n  priority: 100,\r\n})\r\nexport class DataLevelModel extends model.DocumentModel {\r\n  public toJSON(options?: DocumentToObjectOptions): AsObject<this> {\r\n    let obj = this.toObject(options);\r\n    if (options && options.level) {\r\n      const fields = _.keys(\r\n        fetchModelFields(\r\n          this.schema.options.dataLevel,\r\n          options.level,\r\n          this.schema.dataLevel.levelMap,\r\n        ),\r\n      );\r\n      obj = deepOmit(obj, fields);\r\n    }\r\n    return obj;\r\n  }\r\n}\r\n\r\nfunction deepOmit(obj: any, fields: string[]): any {\r\n  if (_.isArray(obj)) {\r\n    return _.map(obj, (o) => deepOmit(o, fields));\r\n  }\r\n\r\n  const grouped = _.groupBy(fields, (f) => (f.indexOf('.') === -1 ? 1 : 0));\r\n  if (grouped[1]) {\r\n    obj = _.omit(obj, ...grouped[1]);\r\n  }\r\n  if (grouped[0]) {\r\n    const goal: any = _.chain(grouped[0])\r\n      .map((v) => {\r\n        const idx = v.indexOf('.');\r\n        return [v.substr(0, idx), v.substring(idx + 1)];\r\n      })\r\n      .groupBy((pair) => pair[0])\r\n      .mapObject((pairs) => _.map(pairs, (p) => p[1]))\r\n      .value();\r\n    _.each(goal, (fs: string[], name: string) => {\r\n      if (obj && obj[name]) {\r\n        obj[name] = deepOmit(obj[name], fs);\r\n      }\r\n    });\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction dataLevelPlugin(schema: Schema, options: SchemaOptions) {\r\n  if (schema.dataLevel != null) {\r\n    return;\r\n  }\r\n  if (options == null) {\r\n    options = schema.options;\r\n  }\r\n\r\n  const dataLevelOptionsLevels = _.values(\r\n    (options.dataLevel && options.dataLevel.levels) || [],\r\n  );\r\n\r\n  schema.dataLevel = {\r\n    levelMap: {},\r\n  };\r\n\r\n  _.each((schema as any).paths, (st: any, path: string) => {\r\n    if (st && st.schema) {\r\n      dataLevelPlugin(st.schema, options);\r\n    }\r\n  });\r\n\r\n  addToLevelMap(schema, levelPaths(schema));\r\n\r\n  for (const name of model.preQueries) {\r\n    schema.pre(name, modifyProjection);\r\n  }\r\n}\r\n\r\nfunction modifyProjection(next: () => void) {\r\n  const schema: Schema = this.schema;\r\n  if (!schema.options || !schema.options.dataLevel) {\r\n    next();\r\n    return;\r\n  }\r\n\r\n  const levels = _.values(schema.options.dataLevel.levels);\r\n\r\n  const level =\r\n    this.options.level ||\r\n    (schema.options.dataLevel && schema.options.dataLevel.default);\r\n\r\n  if (level) {\r\n    if (this._fields == null) {\r\n      this._fields = {};\r\n    }\r\n\r\n    if (\r\n      _.findIndex(_.values(this._fields), (x: any) => x === true || x === 1) ===\r\n      -1\r\n    ) {\r\n      const projectedFields = fetchModelFields(\r\n        schema.options.dataLevel,\r\n        level,\r\n        schema.dataLevel.levelMap,\r\n      );\r\n      _.extend(this._fields, projectedFields);\r\n    }\r\n  }\r\n  next();\r\n}\r\n\r\nfunction fetchModelFields(\r\n  config: DataLevelConfig,\r\n  level: string,\r\n  levelMap: { [name: string]: string[] },\r\n): object {\r\n  if (config._levelsMap == null) {\r\n    config._levelsMap = {};\r\n  }\r\n  if (config._levelsMap[level]) {\r\n    return config._levelsMap[level];\r\n  }\r\n\r\n  const fields: string[] = [];\r\n\r\n  let valid = false;\r\n\r\n  _.each(_.values(config.levels), (l: string) => {\r\n    if (valid) {\r\n      _.each(levelMap[l], (p: string) => {\r\n        fields.push(p);\r\n      });\r\n    }\r\n    if (l === level) {\r\n      valid = true;\r\n    }\r\n  });\r\n\r\n  const filtered: string[] = _.filter(fields, (target) => {\r\n    return _.all(fields, (r) => {\r\n      return target.indexOf(r + '.') !== 0;\r\n    });\r\n  });\r\n\r\n  const result: any = {};\r\n  _.each(filtered, (f) => {\r\n    result[f] = 0;\r\n  });\r\n\r\n  config._levelsMap[level] = result;\r\n\r\n  return result;\r\n}\r\n\r\nfunction addToLevelMap(schema: Schema, lps: LevelPath[]) {\r\n  const dataLevelOptionsLevels = _.values(\r\n    (schema.options.dataLevel && schema.options.dataLevel.levels) || [],\r\n  );\r\n  const levelMap = schema.dataLevel.levelMap;\r\n\r\n  for (const { path, level } of lps) {\r\n    levelMap[level] = _.union(levelMap[level], [path]);\r\n  }\r\n\r\n  _.each((schema as any).paths, (st: any, path: string) => {\r\n    if (st && st.schema) {\r\n      const s: Schema = st.schema;\r\n      _.each(s.dataLevel.levelMap, (ps, l) => {\r\n        levelMap[l] = _.union(\r\n          levelMap[l],\r\n          _.map(ps, (p) => `${path}.${p}`),\r\n        );\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction levelPaths(schema: Schema): LevelPath[] {\r\n  const res: LevelPath[] = [];\r\n  schema.eachPath((pathname, schemaType) => {\r\n    if (pathname.indexOf('$*') >= 0) {\r\n      return;\r\n    }\r\n    const level = (schemaType as any).options.level;\r\n\r\n    if (level != null) {\r\n      res.push({ path: pathname, level });\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\ninterface LevelPath {\r\n  path: string;\r\n  level: string;\r\n}\r\n\r\nexport function Level(level: string, schema: any = {}) {\r\n  return Field(\r\n    _.extend({}, schema, {\r\n      level,\r\n    }),\r\n  );\r\n}\r\n"],"sourceRoot":"D:\\zyq\\ark-db/src"}